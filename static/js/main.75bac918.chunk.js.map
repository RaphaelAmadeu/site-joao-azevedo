{"version":3,"sources":["components/background/index.js","components/content/home/index.js","components/container/index.js","App.js","serviceWorker.js","index.js"],"names":["loaded","active","useEffect","document","getElementsByClassName","style","left","setTimeout","slideBlocksIn","changeMobile","block1","block2","right","block","className","fadeTextIn","content","querySelectorAll","opacity","i","length","current","renderContent","App","useState","currentSection","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAGe,G,KAAA,YAAuB,IAArBA,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OACrBC,qBAAU,WACHF,IACYG,SAASC,uBAAuB,uBAAuB,GAC/DC,MAAMC,KAAO,IAChBC,YAAW,kBAAMC,MAAkB,KAEnCC,EAAaR,MAElB,CAACD,EAAQC,IAEZ,IAAMO,EAAgB,WAClB,IAAME,EAASP,SAASC,uBAAuB,sBAAsB,GAC/DO,EAASR,SAASC,uBAAuB,sBAAsB,GAErEM,EAAOL,MAAMO,MAAQ,IACrBD,EAAON,MAAMC,KAAO,KAGlBG,EAAe,SAACR,GAClB,IAAMY,EAAQV,SAASC,uBAAuB,uBAAuB,GAGjES,EAAMR,MAAMC,KADbL,EACoB,QAEA,KAI3B,OACI,yBAAKa,UAAU,cACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sBAGnB,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,2BCrChB,G,YAAA,YAAe,IAAbd,EAAY,EAAZA,OACbE,qBAAU,WACHF,GACCO,YAAW,kBAAMQ,MAAc,OAEpC,CAACf,IAEJ,IAAMe,EAAa,WACf,IAAMC,EAAUb,SAASc,iBAAiB,mBAC1CD,EAAQ,GAAGX,MAAMa,QAAU,EAC3BF,EAAQ,GAAGX,MAAMa,QAAU,EAC3BF,EAAQ,GAAGX,MAAMa,QAAU,EAC3BF,EAAQ,GAAGX,MAAMa,QAAU,EAE3BX,YAAW,WACP,IAAI,IAAIY,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAC/BH,EAAQG,GAAGd,MAAMa,QAAU,IAEhC,MAGP,OACI,yBAAKJ,UAAU,yBACX,wBAAIA,UAAU,iBAAd,WACS,6BADT,WAKA,4CAIA,6CAIA,iKAEA,yBAAKA,UAAU,mBACX,4BAAQA,UAAU,SAAlB,aACA,4BAAQA,UAAU,QAAlB,iBCvCD,cAAwB,IAAtBO,EAAqB,EAArBA,QAASrB,EAAY,EAAZA,OAStB,OACI,yBAAKc,UAAU,+BATG,SAACO,GACnB,OAAQA,GACJ,KAAK,EACD,OAAO,kBAAC,EAAD,CAAMrB,OAAQA,KAQtBsB,CAAcD,K,MCAdE,MAXf,WAAgB,IAAD,EAC+BC,mBAAS,GADxC,mBACNC,EADM,KAGb,OAHa,KAIX,oCACE,kBAAC,EAAD,CAAYxB,QAAQ,EAAOD,QAAQ,IACnC,kBAAC,EAAD,CAAWA,QAAQ,EAAMqB,QAASI,MCApBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75bac918.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './style.scss';\r\n\r\nexport default ({loaded, active}) => {\r\n    useEffect(() => {\r\n        if(loaded) {\r\n            const bg = document.getElementsByClassName('background-column-1')[0];\r\n            bg.style.left = '0';\r\n            setTimeout(() => slideBlocksIn() , 500);\r\n\r\n            changeMobile(active);\r\n        }\r\n    }, [loaded, active]);\r\n\r\n    const slideBlocksIn = () => {\r\n        const block1 = document.getElementsByClassName('background-block-1')[0];\r\n        const block2 = document.getElementsByClassName('background-block-2')[0];\r\n\r\n        block1.style.right = '0';\r\n        block2.style.left = '0';\r\n    }\r\n\r\n    const changeMobile = (active) => {\r\n        const block = document.getElementsByClassName('background-column-1')[0];\r\n\r\n        if(active) {\r\n            block.style.left = '-100%';\r\n        } else {\r\n            block.style.left = '0';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"background\">\r\n            <div className='background-container'>\r\n                <div className='background-column-1'></div>\r\n                <div className='background-column-2'>\r\n                    <img className='background-image' />\r\n                </div>\r\n\r\n                <div className=\"background-block-1\"></div>\r\n                <div className=\"background-block-2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\n\r\nimport './index.scss';\r\n\r\nexport default ({loaded}) => {\r\n    useEffect(() => {\r\n        if(loaded) {\r\n            setTimeout(() => fadeTextIn(), 1000);\r\n        }\r\n    }, [loaded]);\r\n\r\n    const fadeTextIn = () => {\r\n        const content = document.querySelectorAll('.content-home *');\r\n        content[0].style.opacity = 1;\r\n        content[1].style.opacity = 1;\r\n        content[2].style.opacity = 1;\r\n        content[3].style.opacity = 1;\r\n\r\n        setTimeout(() => {\r\n            for(let i = 4; i < content.length; i++) {\r\n                content[i].style.opacity = 1;\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div className='content-home col-md-6'>\r\n            <h1 className='content-title'>\r\n                João <br />\r\n                Azevedo \r\n            </h1>\r\n\r\n            <h2>\r\n                Psicólogo\r\n            </h2>\r\n\r\n            <h3>\r\n                CRP: 04/56886\r\n            </h3>\r\n\r\n            <p>O empenho em analisar a percepção das dificuldades promove a alavancagem dos relacionamentos verticais entre as hierarquias.</p>\r\n        \r\n            <div className='content-buttons'>\r\n                <button className='light'>Sobre mim</button>\r\n                <button className='dark'>Sobre mim</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './index.scss'\r\nimport Home from '../content/home';\r\n\r\n\r\nexport default ({current, loaded}) => {\r\n    const renderContent = (current) => {\r\n        switch (current) {\r\n            case 0: \r\n                return <Home loaded={loaded} />\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='content-container container'>\r\n            {\r\n               renderContent(current)\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\n\nimport Background from './components/background';\nimport Container from './components/container';\nimport './app.scss';\n\nfunction App() {\n  const [currentSection, setCurrentSection] = useState(0);\n\n  return (\n    <>\n      <Background active={false} loaded={true} />\n      <Container loaded={true} current={currentSection} />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}